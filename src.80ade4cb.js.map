{"version":3,"sources":["board.js","uct.js","index.js"],"names":["createNewBoard","makeMove","x","y","move","board","rowToChange","map","r","i","checkWin","getFreeCells","concat","row","cell","j","filter","length","checkDraw","reduce","prev","acc","uct","turn","nRollouts","C","rootNode","createNode","search","children","childrenKeys","Object","keys","max","curr","value","getRandomIntInclusive","min","Math","ceil","floor","random","count","selectMove","node","initTurn","moves","uctVals","key","child","explorationPart","Infinity","sqrt","log","uctVal","bestVal","bestMoves","_","chosenMove","won","Board","iMove","jMove","childNode","score","toggleTurn","createElemWithClassName","tagName","classNames","elem","document","createElement","forEach","name","classList","add","createX","createO","draw","elems","cellElem","querySelector","Array","from","e","appendChild","playMove","win","handleEnd","showTurn","innerHTML","clearBoardElem","cellElems","childNodes","reverse","removeChild","winner","game","startButtonElem","disabled","clickToStartElem","style","opacity","gameResultElem","turnIndicator","startGame","target","N_ROLLOUTS","boardEl","querySelectorAll","addEventListener","el","id","split","parseInt","resMove","newBoard","turn_","console","split_","i_","j_","setTimeout"],"mappings":"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","file":"src.80ade4cb.js","sourceRoot":"../src","sourcesContent":["export function createNewBoard() {\n  return [\n    [\"\", \"\", \"\"],\n    [\"\", \"\", \"\"],\n    [\"\", \"\", \"\"]\n  ];\n}\n\nexport function makeMove(x, y, move, board) {\n  const rowToChange = [...board[y]];\n  rowToChange[x] = move;\n\n  return board.map((r, i) => (i === y ? rowToChange : r));\n}\n\nexport function checkWin(board) {\n  // horizontal\n  if (board[0][0] === board[0][1] && board[0][1] === board[0][2]) {\n    return board[0][0];\n  } else if (board[1][0] === board[1][1] && board[1][1] === board[1][2]) {\n    return board[1][0];\n  } else if (board[2][0] === board[2][1] && board[2][1] === board[2][2]) {\n    return board[2][0];\n  }\n  // vertical\n  else if (board[0][0] === board[1][0] && board[1][0] === board[2][0]) {\n    return board[0][0];\n  } else if (board[0][1] === board[1][1] && board[1][1] === board[2][1]) {\n    return board[0][1];\n  } else if (board[0][2] === board[1][2] && board[1][2] === board[2][2]) {\n    return board[0][2];\n  }\n  // diagonal\n  else if (board[0][0] === board[1][1] && board[1][1] === board[2][2]) {\n    return board[0][0];\n  } else if (board[0][2] === board[1][1] && board[1][1] === board[2][0]) {\n    return board[0][2];\n  }\n\n  return false;\n}\n\nexport function getFreeCells(board) {\n  return [].concat(\n    ...board.map((row, i) =>\n      row\n        .map((cell, j) => (cell === \"\" ? [i + 1, j + 1] : []))\n        .filter(x => x.length > 0)\n    )\n  );\n}\n\nexport function checkDraw(board) {\n  return (\n    board\n      .map(row => row.filter(cell => cell === \"\").length)\n      .reduce((prev, acc) => prev + acc, 0) === 0\n  );\n}\n","import * as Board from \"./board\";\n\nexport function uct(turn, board, nRollouts, C) {\n  const rootNode = createNode(turn);\n  for (let i = 0; i < nRollouts; ++i) {\n    search(rootNode, turn, turn, board, C);\n  }\n\n  const { children } = rootNode;\n  const childrenKeys = Object.keys(children);\n  return [\n    childrenKeys.reduce(\n      (max, curr) => (children[curr].value > children[max].value ? curr : max),\n      childrenKeys[0]\n    ),\n    rootNode\n  ];\n}\n\nfunction getRandomIntInclusive(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nfunction createNode(turn) {\n  return { value: -1, count: 0, turn, children: {} };\n}\n\nfunction selectMove(node, initTurn, moves, C) {\n  const uctVals = moves.map(move => {\n    const key = `${move[0]}-${move[1]}`;\n    if (typeof node.children[key] === \"undefined\") {\n      node.children[key] = createNode(node.turn === \"X\" ? \"O\" : \"X\");\n    }\n    const child = node.children[key];\n    const explorationPart =\n      child.count === 0\n        ? Infinity\n        : Math.sqrt(Math.log(node.count) / child.count);\n    const uctVal =\n      child.value +\n      C * (node.turn === initTurn ? explorationPart : -explorationPart);\n\n    return uctVal;\n  });\n\n  const func = Math[node.turn === initTurn ? \"max\" : \"min\"];\n  const bestVal = func(...uctVals);\n  const bestMoves = moves.filter((_, i) => uctVals[i] === bestVal);\n\n  const chosenIndex = getRandomIntInclusive(0, bestMoves.length - 1);\n  const chosenMove = bestMoves[chosenIndex];\n  const chosenChild = node.children[`${chosenMove[0]}-${chosenMove[1]}`];\n\n  return [chosenMove, chosenChild];\n}\n\nfunction search(node, turn, initTurn, board, C) {\n  const won = Board.checkWin(board);\n  if (won) {\n    const value = won === initTurn ? 1 : -1;\n    node.value = value;\n\n    return value;\n  }\n  if (Board.checkDraw(board)) {\n    node.value = 0;\n    return 0;\n  }\n\n  const moves = Board.getFreeCells(board);\n\n  const [[iMove, jMove], childNode] = selectMove(node, initTurn, moves, C);\n\n  const newBoard = Board.makeMove(jMove - 1, iMove - 1, turn, board);\n  const newTurn = turn === \"X\" ? \"O\" : \"X\";\n\n  const score = search(childNode, newTurn, initTurn, newBoard, C);\n\n  // backup values\n  childNode.value =\n    (childNode.count * childNode.value + score) / (childNode.count + 1);\n  // update node count\n  node.count += 1;\n\n  return score;\n}\n","import * as Board from \"./board\";\nimport { uct } from \"./uct\";\n\nfunction toggleTurn(turn) {\n  return turn === \"O\" ? \"X\" : \"O\";\n}\n\nfunction createElemWithClassName(tagName, ...classNames) {\n  const elem = document.createElement(tagName);\n  classNames.forEach(name => elem.classList.add(name));\n  return elem;\n}\n\nfunction createX() {\n  return [\n    createElemWithClassName(\"div\", \"x-cell-line\", \"rotate45\"),\n    createElemWithClassName(\"div\", \"x-cell-line\", \"rotate45neg\")\n  ];\n}\n\nfunction createO() {\n  return [createElemWithClassName(\"div\", \"o-cell\")];\n}\n\nfunction draw(turn, i, j) {\n  const elems = turn === \"X\" ? createX() : createO();\n  const cellElem = document.querySelector(`#cell-${i}-${j}`);\n\n  Array.from(elems).forEach(e => cellElem.appendChild(e));\n}\n\nfunction playMove(i, j, turn, board) {\n  draw(turn, i, j);\n  board = Board.makeMove(j - 1, i - 1, turn, board);\n  const win = Board.checkWin(board);\n  if (win) {\n    handleEnd(win);\n    return [win, board];\n  }\n  if (Board.checkDraw(board)) {\n    handleEnd();\n    return [\"\", board];\n  }\n  return [false, board];\n}\n\nfunction showTurn(turn) {\n  document.querySelector(\"#current-turn\").innerHTML = turn;\n}\n\nfunction clearBoardElem() {\n  cellElems.forEach(elem =>\n    Array.from(elem.childNodes)\n      .reverse()\n      .forEach(child => elem.removeChild(child))\n  );\n}\n\nfunction handleEnd(winner) {\n  game = false;\n  startButtonElem.disabled = false;\n  clickToStartElem.style.opacity = 1;\n\n  gameResultElem.innerHTML =\n    typeof winner === \"undefined\" ? \"Draw!\" : `${winner} won!`;\n  gameResultElem.style.opacity = 1;\n\n  turnIndicator.style.opacity = 0;\n}\n\nfunction startGame(e) {\n  board = Board.createNewBoard();\n  clearBoardElem();\n  e.target.disabled = true;\n  game = true;\n  showTurn(turn);\n  clickToStartElem.style.opacity = 0;\n  gameResultElem.style.opacity = 0;\n  turnIndicator.style.opacity = 1;\n}\n\nconst N_ROLLOUTS = 200;\nconst C = 1;\n\n// Game state\n// ================================================================\nlet board = Board.createNewBoard();\nlet turn = \"O\";\nlet game = false;\n// ================================================================\n// Elements\n// ================================================================\nlet boardEl = document.querySelector(\"#board\");\nlet cellElems = document.querySelectorAll(\".cell\");\nlet gameResultElem = document.querySelector(\"#game-result\");\nlet startButtonElem = document.querySelector(\"#start-button\");\nlet clickToStartElem = document.querySelector(\"#click-to-start\");\nlet turnIndicator = document.querySelector(\"#turn-indicator\");\n// ================================================================\n\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n  // Elements\n  // ================================================================\n  boardEl = document.querySelector(\"#board\");\n  cellElems = document.querySelectorAll(\".cell\");\n  gameResultElem = document.querySelector(\"#game-result\");\n  startButtonElem = document.querySelector(\"#start-button\");\n  clickToStartElem = document.querySelector(\"#click-to-start\");\n  turnIndicator = document.querySelector(\"#turn-indicator\");\n  // ================================================================\n\n  cellElems.forEach(el =>\n    el.addEventListener(\"click\", function(e) {\n      if (!game) return;\n\n      const { id } = e.target;\n      const split = id.split(\"-\");\n      const i = parseInt(split[1]);\n      const j = parseInt(split[2]);\n\n      let [resMove, newBoard] = playMove(i, j, turn, board);\n      board = newBoard;\n      if (resMove !== false) {\n        return;\n      }\n\n      const turn_ = toggleTurn(turn);\n      const [move] = uct(turn_, board, N_ROLLOUTS, C);\n      console.log(\"UCT finished: \", move);\n\n      showTurn(turn_);\n\n      const split_ = move.split(\"-\");\n      const i_ = parseInt(split_[0]);\n      const j_ = parseInt(split_[1]);\n\n      setTimeout(() => {\n        [resMove, newBoard] = playMove(i_, j_, turn_, board);\n        board = newBoard;\n        showTurn(turn);\n      }, 1000);\n    })\n  );\n\n  startButtonElem.addEventListener(\"click\", startGame);\n  startButtonElem.addEventListener(\"touchstart\", startGame);\n});\n"]}
{"version":3,"sources":["board.js"],"names":["createNewBoard","makeMove","x","y","move","board","rowToChange","map","r","i","checkWin","getFreeCells","concat","row","cell","j","filter","length","checkDraw","reduce","prev","acc"],"mappings":";AA0DC,aAAA,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,mDAAA,SAAA,EAAA,GAAA,GAAA,OAAA,YAAA,OAAA,IAAA,uBAAA,OAAA,UAAA,SAAA,KAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,CAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,EAAA,QAAA,EAAA,EAAA,OAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,GA1DM,SAASA,IACP,MAAA,CACL,CAAC,GAAI,GAAI,IACT,CAAC,GAAI,GAAI,IACT,CAAC,GAAI,GAAI,KAIN,SAASC,EAASC,EAAGC,EAAGC,EAAMC,GAC7BC,IAAAA,EAAkBD,EAAAA,EAAMF,IAGvBE,OAFPC,EAAYJ,GAAKE,EAEVC,EAAME,IAAI,SAACC,EAAGC,GAAOA,OAAAA,IAAMN,EAAIG,EAAcE,IAG/C,SAASE,EAASL,GAEnBA,OAAAA,EAAM,GAAG,KAAOA,EAAM,GAAG,IAAMA,EAAM,GAAG,KAAOA,EAAM,GAAG,GACnDA,EAAM,GAAG,GACPA,EAAM,GAAG,KAAOA,EAAM,GAAG,IAAMA,EAAM,GAAG,KAAOA,EAAM,GAAG,GAC1DA,EAAM,GAAG,GACPA,EAAM,GAAG,KAAOA,EAAM,GAAG,IAAMA,EAAM,GAAG,KAAOA,EAAM,GAAG,GAC1DA,EAAM,GAAG,GAGTA,EAAM,GAAG,KAAOA,EAAM,GAAG,IAAMA,EAAM,GAAG,KAAOA,EAAM,GAAG,GACxDA,EAAM,GAAG,GACPA,EAAM,GAAG,KAAOA,EAAM,GAAG,IAAMA,EAAM,GAAG,KAAOA,EAAM,GAAG,GAC1DA,EAAM,GAAG,GACPA,EAAM,GAAG,KAAOA,EAAM,GAAG,IAAMA,EAAM,GAAG,KAAOA,EAAM,GAAG,GAC1DA,EAAM,GAAG,GAGTA,EAAM,GAAG,KAAOA,EAAM,GAAG,IAAMA,EAAM,GAAG,KAAOA,EAAM,GAAG,GACxDA,EAAM,GAAG,GACPA,EAAM,GAAG,KAAOA,EAAM,GAAG,IAAMA,EAAM,GAAG,KAAOA,EAAM,GAAG,IAC1DA,EAAM,GAAG,GAMb,SAASM,EAAaN,GAAO,IAAA,EAC3B,OAAGO,EAAAA,IAAAA,OACLP,MAAAA,EAAAA,EAAAA,EAAME,IAAI,SAACM,EAAKJ,GACjBI,OAAAA,EACGN,IAAI,SAACO,EAAMC,GAAOD,MAAS,KAATA,EAAc,CAACL,EAAGM,GAAK,KACzCC,OAAO,SAAAd,GAAKA,OAAAA,EAAEe,OAAS,QAKzB,SAASC,EAAUb,GAEtBA,OAE4C,IAF5CA,EACGE,IAAI,SAAAM,GAAOA,OAAAA,EAAIG,OAAO,SAAAF,GAAQA,MAAS,KAATA,IAAaG,SAC3CE,OAAO,SAACC,EAAMC,GAAQD,OAAAA,EAAOC,GAAK,GAExC,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,eAAA,EAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,QAAA,aAAA,EAAA,QAAA,UAAA","file":"board.js","sourceRoot":"..","sourcesContent":["export function createNewBoard() {\n  return [\n    [\"\", \"\", \"\"],\n    [\"\", \"\", \"\"],\n    [\"\", \"\", \"\"]\n  ];\n}\n\nexport function makeMove(x, y, move, board) {\n  const rowToChange = [...board[y]];\n  rowToChange[x] = move;\n\n  return board.map((r, i) => (i === y ? rowToChange : r));\n}\n\nexport function checkWin(board) {\n  // horizontal\n  if (board[0][0] === board[0][1] && board[0][1] === board[0][2]) {\n    return board[0][0];\n  } else if (board[1][0] === board[1][1] && board[1][1] === board[1][2]) {\n    return board[1][0];\n  } else if (board[2][0] === board[2][1] && board[2][1] === board[2][2]) {\n    return board[2][0];\n  }\n  // vertical\n  else if (board[0][0] === board[1][0] && board[1][0] === board[2][0]) {\n    return board[0][0];\n  } else if (board[0][1] === board[1][1] && board[1][1] === board[2][1]) {\n    return board[0][1];\n  } else if (board[0][2] === board[1][2] && board[1][2] === board[2][2]) {\n    return board[0][2];\n  }\n  // diagonal\n  else if (board[0][0] === board[1][1] && board[1][1] === board[2][2]) {\n    return board[0][0];\n  } else if (board[0][2] === board[1][1] && board[1][1] === board[2][0]) {\n    return board[0][2];\n  }\n\n  return false;\n}\n\nexport function getFreeCells(board) {\n  return [].concat(\n    ...board.map((row, i) =>\n      row\n        .map((cell, j) => (cell === \"\" ? [i, j] : []))\n        .filter(x => x.length > 0)\n    )\n  );\n}\n\nexport function checkDraw(board) {\n  return (\n    board\n      .map(row => row.filter(cell => cell === \"\").length)\n      .reduce((prev, acc) => prev + acc, 0) === 0\n  );\n}\n"]}